package hash

import (
	"hash"
)

const blockSize = 16

// The MD2 algorithm is defined as follows:
// https://tools.ietf.org/html/rfc1319

var md2_S = [256]byte{
	0x29, 0x2E, 0x43, 0xC9, 0x40, 0x55, 0x44, 0x5A, 0xA3, 0x32, 0x46, 0x0A, 0x28, 0xB9, 0x4E, 0x18,
	0xA4, 0x6E, 0xA9, 0x74, 0xB4, 0xAA, 0x63, 0xE8, 0x90, 0xE4, 0x58, 0xD5, 0x8B, 0xA2, 0x8E, 0x62,
	0x8C, 0xFB, 0x1F, 0x41, 0x7F, 0x6A, 0x91, 0x5D, 0x45, 0xEF, 0x3A, 0x66, 0x54, 0xCB, 0x1E, 0x10,
	0x0D, 0x8A, 0x51, 0xBD, 0x2B, 0xDD, 0xDC, 0x1A, 0x65, 0xDE, 0x5B, 0xF7, 0x5E, 0x18, 0x02, 0xE7,
	0xAA, 0x8F, 0x1D, 0x80, 0x96, 0xF4, 0xBA, 0xE1, 0xEB, 0xE6, 0x60, 0x94, 0xF8, 0x59, 0xA1, 0x0E,
	0xF1, 0xD7, 0xFB, 0x7C, 0x39, 0x4F, 0x5F, 0x57, 0xC1, 0x2D, 0x4B, 0x52, 0x15, 0xC2, 0xD2, 0x5C,
	0x1B, 0x3D, 0xC7, 0xE0, 0xF9, 0x47, 0x80, 0x29, 0xC3, 0xA7, 0x57, 0xF2, 0x1A, 0x3A, 0x78, 0xFD,
	0x1F, 0x22, 0xAC, 0x0F, 0x3C, 0x30, 0xDC, 0xF5, 0x7E, 0xEC, 0x9D, 0xCD, 0xF3, 0xA6, 0x29, 0xF0,
	0x2A, 0x14, 0xDE, 0x3A, 0xC1, 0x3E, 0x8A, 0x9A, 0x62, 0x2B, 0xAA, 0x6F, 0xDA, 0x76, 0xA5, 0xC9,
	0x95, 0xDB, 0xE3, 0x0B, 0xCF, 0x7B, 0x85, 0x44, 0x34, 0xB7, 0xE6, 0xA8, 0xA3, 0x7D, 0x5B, 0x88,
	0xA1, 0x74, 0x06, 0xD1, 0x77, 0x42, 0x8C, 0xD4, 0xAB, 0xE8, 0xF8, 0x93, 0xAD, 0x14, 0x9F, 0x50,
	0xBB, 0x32, 0xEC, 0xE1, 0x83, 0x63, 0x12, 0x07, 0xB9, 0xE0, 0x6A, 0x98, 0x3B, 0x21, 0x40, 0xB5,
	0x02, 0xD9, 0xD0, 0xA4, 0xA5, 0x67, 0x50, 0xEB, 0x6E, 0x02, 0xF3, 0x38, 0xB2, 0x9C, 0xF7, 0x6F,
	0xE2, 0x27, 0xD8, 0xDC, 0x7B, 0x65, 0xBB, 0x36, 0x0D, 0x4D, 0x1B, 0x61, 0x1C, 0xD7, 0xD6, 0x30,
	0x67, 0xB6, 0x2A, 0xA9, 0x2F, 0x76, 0x93, 0xC6, 0x90, 0xE0, 0x6D, 0xE5, 0x46, 0x6B, 0x72, 0x45,
	0x82, 0x47, 0x7D, 0x6C, 0xD8, 0xA1, 0x21, 0xC1, 0x6F, 0x69, 0x9A, 0x99, 0xD4, 0x15, 0x1A, 0x61,
}

// digest represents the partial evaluation of a checksum.
type md2 struct {
	state    [16]byte
	checksum [16]byte
	buf      [16]byte
	nbytes   int
}

// New returns a new hash.Hash computing the MD2 checksum.
func NewMD2() hash.Hash {
	d := new(md2)
	d.Reset()
	return d
}

func (d *md2) BlockSize() int { return blockSize }

func (d *md2) Size() int { return blockSize }

func (d *md2) Reset() {
	for i := range d.state {
		d.state[i] = 0
	}
	for i := range d.checksum {
		d.checksum[i] = 0
	}
	for i := range d.buf {
		d.buf[i] = 0
	}
	d.nbytes = 0
}

func (d *md2) Write(p []byte) (int, error) {
	n := len(p)
	d.nbytes += n

	for len(p) > 0 {
		space := blockSize - len(d.buf)
		if len(p) < space {
			space = len(p)
		}
		copy(d.buf[len(d.buf)-space:], p[:space])
		p = p[space:]

		if len(d.buf) == blockSize {
			d.checksumUpdate()
			d.transform(d.buf[:])
		}
	}

	return n, nil
}

func (d *md2) Sum(in []byte) []byte {
	// Pad buffer to blockSize.
	n := blockSize - len(d.buf)
	for i := range d.buf[len(d.buf)-n:] {
		d.buf[i] = byte(n)
	}

	// Checksum update.
	d.checksumUpdate()

	// Transform remaining blocks.
	d.transform(d.buf[:])
	d.transform(d.checksum[:])

	return append(in, d.state[:]...)
}

func (d *md2) checksumUpdate() {
	l := d.checksum[15]
	for i := range d.buf {
		c := d.buf[i]
		d.checksum[i] ^= md2_S[c^l]
		l = d.checksum[i]
	}
}

func (d *md2) transform(block []byte) {
	x := [48]byte{}

	copy(x[:16], d.state[:])
	copy(x[16:32], block[:])
	for i := 0; i < 16; i++ {
		x[i+32] = d.state[i] ^ block[i]
	}

	t := byte(0)
	for i := 0; i < 18; i++ {
		for j := range x {
			t = x[j] ^ md2_S[t]
			x[j] = t
		}
		t = (t + byte(i)) & 0xFF
	}

	copy(d.state[:], x[:16])
}
